
package knapsack;



/*A recursive implementation of 0-1 Knapsack problem */
import java.util.*;
class Knapsack { 

	// A utility function max that returns a  maximum of two integers 
	static int max(int a, int b) 
	{ 
		return (a > b) ? a : b; 
	} 

	// Returns the maximum value that 
	// can be put in a knapsack of 
	// capacity W 
	static int knapSack( 
		int W, int wt[], 
		int val[], int n) 
	{ 
		// Base Case 
		if (n == 0 || W == 0) 
			return 0; 

		// If weight of the nth item is 
		// more than Knapsack capacity W, 
		// then this item cannot be included 
		// in the optimal solution 
		if (wt[n - 1] > W) 
			return knapSack(W, wt, val, n - 1); 

		// Return the maximum of two cases: 
		// (1) nth item included 
		// (2) not included 
		else
			return max( 
				val[n - 1] + knapSack(W - wt[n - 1], 
									wt, val, n - 1), 
				knapSack(W, wt, val, n - 1)); 
	} 

	// Driver program to test 
	// above function 
	public static void main(String args[]) 
	{ 
                Scanner s = new Scanner(System.in);
		int val[] = new int[] { 6, 90, 78 }; 
		int wt[] = new int[] { 11, 50, 38 }; 
                int n = val.length; 
                int W;
                
                System.out.println("Enter an integer value of the Knapsack Capacity W: ");
                
                //this try catch block prohibits a user from entering a 
                //different value other than an integer for the Knapsack capacity.
                try{
                  
                   W= s.nextInt();//The variable W is the Knapsack capacity.
                   System.out.println(knapSack(W, wt, val, n)); 
                }
                catch(InputMismatchException ex){
                
                    
                 System.out.println("Please enter only an integer for value W!");
                    
                }
		
	} 
} 


